import abc
from typing import Union, List, Dict, Any, Optional

import lair
import lair.sessions.serializer
import lair.reporting
import lair.util.prompt_template
from lair.components.history import ChatHistory
from lair.logging import logger  # noqa


class BaseChatSession(abc.ABC):

    @abc.abstractmethod
    def __init__(self, *, history=None, tool_set: lair.components.tools.ToolSet = None,
                 enable_chat_output: bool = False):
        """
        Arguments:
           history: History class to provide. Defaults to a new ChatHistory()
           tool_set: ToolSet to use. Defaults to a new ToolSet()
           enable_chat_output: When true, send verbose mode output. Must also be enabled via chat.verbose.
        """
        self.reporting = lair.reporting.Reporting()
        self.last_prompt = None
        self.last_response = None

        self.session_id = None  # Id for session management, provided by SessionManager()
        self.session_alias = None  # Alias string for session management purposes
        self.session_title = None  # Short title for the session

        self.history = history or ChatHistory()
        self.enable_chat_output = enable_chat_output
        self.tool_set = tool_set or lair.components.tools.ToolSet()

    @abc.abstractmethod
    def invoke(self, messages: list = None, disable_system_prompt=False):
        """
        Call the underlying model without altering state (no history)

        Returns:
            str: The response for the model
        """
        pass

    @abc.abstractmethod
    def invoke_with_tools(self, messages: list = None, disable_system_prompt=False):
        """
        Call the underlying model without altering state (no history)

        Returns:
            tuple[str, list[dict]]: A tuple containing:
              - str: The response for the model
              - list[dict]: tool call history messages
        """
        pass

    def chat(self, message: Optional[Union[str, List[Dict[str, Any]]]] = None) -> str:
        """
        Adds a message to the chat history, sends a chat completion request, and returns the response.

        Parameters:
            message (str, list, or None): The message to process. This can either be:
                - A string representing a single message,
                - A list following the allowed structure for the content section
                  (e.g., [{'role': 'user', 'content': message}]), or
                - None, which indicates no message was provided.

        Returns:
            str: The response generated by the chat completion request.
        """
        if message:
            self.history.add_message('user', message)

        try:
            if lair.config.get('tools.enabled'):
                answer, tool_messages = self.invoke_with_tools()
            else:
                answer = self.invoke()
                tool_messages = None
        except (Exception, KeyboardInterrupt):
            self.history.rollback()
            raise

        self.last_response = answer

        if tool_messages:
            self.history.add_tool_messages(tool_messages)
        self.history.add_message('assistant', answer)
        self.history.commit()

        if self.session_title is None and lair.config.get('session.auto_generate_titles.enabled'):
            self.auto_generate_title()

        return answer

    def auto_generate_title(self):
        if self.history.num_messages() < 2 or not lair.config.get('session.auto_generate_titles.enabled'):
            return None

        messages = self.history.get_messages()[:2]
        message = self.invoke(
            disable_system_prompt=True,
            model=lair.config.get('session.auto_generate_titles.model'),
            temperature=lair.config.get('session.auto_generate_titles.temperature'),
            messages=[
                {
                    'role': 'system',
                    'content': lair.util.prompt_template.fill(lair.config.get('session.auto_generate_titles.template')),
                },
                {
                    'role': 'user',
                    'content': f'USER\n{messages[0]['content'][:128]}\n\nASSISTANT\n{messages[1]['content'][:128]}',
                }
            ]
        )

        logger.debug(f"auto_generate_title(): session={self.session_id}, title={message}")
        self.session_title = message
        return message

    def get_system_prompt(self):
        return lair.util.prompt_template.fill(lair.config.get('session.system_prompt_template'))

    def save_to_file(self, filename):
        lair.sessions.serializer.save(self, filename)

    def load_from_file(self, filename):
        lair.sessions.serializer.load(self, filename)

    def to_dict(self):
        return lair.sessions.serializer.session_to_dict(self)

    def update_from_dict(self, state):
        return lair.sessions.serializer.update_session_from_dict(self)

    @abc.abstractmethod
    def list_models(self, *, ignore_errors=False):
        """
        Retrieve a list of available models and their metadata.

        This method fetches a list of models using the OpenAI API and returns a
        formatted list of dictionaries containing metadata about each model, such as
        its ID, creation date, object type, and ownership.

        Parameters:
            ignore_errors (bool, optional):
                If True, any exceptions encountered during the retrieval of models
                will be logged at the debug level, and the method will return `None`
                instead of raising the exception. If False, exceptions will be propagated.

        Returns:
            list[dict] | None:
                A list of dictionaries, each representing a model with the following keys:
                - 'id' (str): The model's unique identifier.
                - 'created' (datetime.datetime): The model's creation timestamp in UTC.
                - 'object' (str): The type of object (e.g., "model").
                - 'owned_by' (str): The identifier of the entity that owns the model.

                Returns `None` if an exception occurs and `ignore_errors` is True.

        Raises:
            Exception:
                If an error occurs during model retrieval and `ignore_errors` is False.
        """
        pass

    def new_session(self):
        self.session_alias = None
        self.session_title = None
        self.last_prompt = None
        self.last_response = None
        self.history.clear()

    def import_state(self, chat_session):
        """
        Import state from another chat session.
        This is used when switching session types.
        """
        self.session_alias = chat_session.session_alias
        self.session_title = chat_session.session_title
        self.last_prompt = chat_session.last_prompt
        self.last_response = chat_session.last_response

        self.history = chat_session.history
        self.tool_set = chat_session.tool_set
