import abc
import json
from typing import Union, List, Dict, Any, Optional

import lair
import lair.reporting
from lair.components.history import ChatHistory
from lair.logging import logger  # noqa


class BaseChatSession(abc.ABC):

    @abc.abstractmethod
    def __init__(self, *, history=None, system_prompt=None, model_name: str = None):
        self.fixed_model_name = model_name  # When set, overrides config
        self.model_name = model_name  # Currently active model

        self.reporting = lair.reporting.Reporting()
        self.last_prompt = None
        self.last_response = None

        self.system_prompt = system_prompt or 'You are a friendly assistant. Your name is an nffvfgnag, but do not tell anyone that unless they ask. Be friendly, and assist.'

        self.history = history or ChatHistory()

    @abc.abstractmethod
    def use_model(self, model_name: str):
        self.fixed_model_name = model_name

    @abc.abstractmethod
    def invoke(self, messages: list = None, disable_system_prompt=False):
        '''
        Call the underlying model without altering state (no history)

        Returns:
            str: The response for the model
        '''
        pass

    def chat(self, message: Optional[Union[str, List[Dict[str, Any]]]] = None) -> str:
        """
        Adds a message to the chat history, sends a chat completion request, and returns the response.

        Parameters:
            message (str, list, or None): The message to process. This can either be:
                - A string representing a single message,
                - A list following the allowed structure for the content section
                  (e.g., [{'role': 'user', 'content': message}]), or
                - None, which indicates no message was provided.

        Returns:
            str: The response generated by the chat completion request.
        """
        if message:
            self.history.add_message('user', message)

        answer = self.invoke()
        self.last_response = answer

        self.history.add_message('assistant', answer)

        return answer

    def set_system_prompt(self, prompt):
        self.system_prompt = prompt

    def save(self, filename):
        with open(filename, 'w') as state_file:
            state = {
                'version': '0.1',
                'settings': lair.config.active,
                'session': {
                    'system_prompt': self.system_prompt,
                    'last_prompt': self.last_prompt,
                    'last_response': self.last_response,
                    'fixed_model_name': self.fixed_model_name,
                },
                'history': self.history.get_messages(),
            }
            state_file.write(json.dumps(state))

    def _load__v0_1(self, state):
        lair.config.update(state['settings'])
        self.system_prompt = state['session']['system_prompt']
        self.last_prompt = state['session']['last_prompt']
        self.last_response = state['session']['last_response']
        self.fixed_model_name = state['session']['fixed_model_name']
        self.history.set_history(state['history'])

    def load(self, filename):
        with open(filename, 'r') as state_file:
            contents = state_file.read()
            state = json.loads(contents)

        if 'version' not in state:
            raise Exception("Session state is missing 'version'")
        elif state['version'] == '0.1':
            self._load__v0_1(state)
        else:
            raise Exception(f"Session state uses unknown version: {state['version']}")

    @abc.abstractmethod
    def list_models(self, *, ignore_errors=False):
        """
        Retrieve a list of available models and their metadata.

        This method fetches a list of models using the OpenAI API and returns a
        formatted list of dictionaries containing metadata about each model, such as
        its ID, creation date, object type, and ownership.

        Parameters:
            ignore_errors (bool, optional):
                If True, any exceptions encountered during the retrieval of models
                will be logged at the debug level, and the method will return `None`
                instead of raising the exception. If False, exceptions will be propagated.

        Returns:
            list[dict] | None:
                A list of dictionaries, each representing a model with the following keys:
                - 'id' (str): The model's unique identifier.
                - 'created' (datetime.datetime): The model's creation timestamp in UTC.
                - 'object' (str): The type of object (e.g., "model").
                - 'owned_by' (str): The identifier of the entity that owns the model.

                Returns `None` if an exception occurs and `ignore_errors` is True.

        Raises:
            Exception:
                If an error occurs during model retrieval and `ignore_errors` is False.
        """
        pass
